/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IBaseStrategy,
  IBaseStrategyInterface,
} from "../../../contracts/interfaces/IBaseStrategy";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "target",
        type: "string",
      },
    ],
    name: "EmptyString",
    type: "error",
  },
  {
    inputs: [],
    name: "ExecuteWithdrawWStrategyError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "target",
        type: "string",
      },
    ],
    name: "InvalidAdaptersPath",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "target",
        type: "string",
      },
    ],
    name: "ZeroAddress",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "target",
        type: "string",
      },
    ],
    name: "ZeroAmount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "newDeployPath",
        type: "address[]",
      },
    ],
    name: "AdaptersDeployPathSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "newWithdrawPath",
        type: "address[]",
      },
    ],
    name: "AdaptersWithdrawPathSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "LiquidTokenSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "priceFeed",
        type: "address",
      },
    ],
    name: "PriceFeedSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    name: "StrategyNameSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "TokenWrapperSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "vaultAddress",
        type: "address",
      },
    ],
    name: "VaultAddressSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "strategyAddress",
        type: "address",
      },
    ],
    name: "WithdrawStrategyAddressSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "assetsAmount",
        type: "uint256",
      },
    ],
    name: "WithdrawStrategyExecuted",
    type: "event",
  },
] as const;

export class IBaseStrategy__factory {
  static readonly abi = _abi;
  static createInterface(): IBaseStrategyInterface {
    return new Interface(_abi) as IBaseStrategyInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IBaseStrategy {
    return new Contract(address, _abi, runner) as unknown as IBaseStrategy;
  }
}
