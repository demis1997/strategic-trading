/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  MockAggregationExecutor,
  MockAggregationExecutorInterface,
} from "../../../../contracts/_mocks/1InchMock.sol/MockAggregationExecutor";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060e18061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806309c5eabe14602d575b600080fd5b603c6038366004603e565b5050565b005b60008060208385031215605057600080fd5b823567ffffffffffffffff80821115606757600080fd5b818501915085601f830112607a57600080fd5b813581811115608857600080fd5b866020828501011115609957600080fd5b6020929092019691955090935050505056fea2646970667358221220a765a99f5d68980505eeb6655538c9275b2fa711adf7783bf60e85240076963264736f6c63430008180033";

type MockAggregationExecutorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockAggregationExecutorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockAggregationExecutor__factory extends ContractFactory {
  constructor(...args: MockAggregationExecutorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockAggregationExecutor & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MockAggregationExecutor__factory {
    return super.connect(runner) as MockAggregationExecutor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockAggregationExecutorInterface {
    return new Interface(_abi) as MockAggregationExecutorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockAggregationExecutor {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MockAggregationExecutor;
  }
}
