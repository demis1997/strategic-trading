/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC4626Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC4626Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: "IERC4626",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC4626__factory>;
    getContractFactory(
      name: "BeaconProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BeaconProxy__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "UpgradeableBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeableBeacon__factory>;
    getContractFactory(
      name: "ERC1967Utils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Utils__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeERC20__factory>;
    getContractFactory(
      name: "Address",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Address__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Math",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Math__factory>;
    getContractFactory(
      name: "AdapterMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AdapterMock__factory>;
    getContractFactory(
      name: "EtherFiMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EtherFiMock__factory>;
    getContractFactory(
      name: "KelpMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KelpMock__factory>;
    getContractFactory(
      name: "LidoMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LidoMock__factory>;
    getContractFactory(
      name: "RenzoProtocolMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RenzoProtocolMock__factory>;
    getContractFactory(
      name: "RocketPoolMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RocketPoolMock__factory>;
    getContractFactory(
      name: "RocketSettingsMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RocketSettingsMock__factory>;
    getContractFactory(
      name: "StaderMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StaderMock__factory>;
    getContractFactory(
      name: "TestnetAdapterMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestnetAdapterMock__factory>;
    getContractFactory(
      name: "UniswapPoolMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapPoolMock__factory>;
    getContractFactory(
      name: "UniswapV3QuoterMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV3QuoterMock__factory>;
    getContractFactory(
      name: "UniswapV3RouterMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV3RouterMock__factory>;
    getContractFactory(
      name: "DepositStrategyMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DepositStrategyMock__factory>;
    getContractFactory(
      name: "MasterTokenMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MasterTokenMock__factory>;
    getContractFactory(
      name: "OracleMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleMock__factory>;
    getContractFactory(
      name: "ProtocolMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProtocolMock__factory>;
    getContractFactory(
      name: "StrSimpleReStakingV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StrSimpleReStakingV2__factory>;
    getContractFactory(
      name: "EETHMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EETHMock__factory>;
    getContractFactory(
      name: "ERC20CustomInherits",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20CustomInherits__factory>;
    getContractFactory(
      name: "ERC20Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Mock__factory>;
    getContractFactory(
      name: "GenericWrapperMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GenericWrapperMock__factory>;
    getContractFactory(
      name: "RETHMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RETHMock__factory>;
    getContractFactory(
      name: "WEETHMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WEETHMock__factory>;
    getContractFactory(
      name: "WETHMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETHMock__factory>;
    getContractFactory(
      name: "WstETHMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WstETHMock__factory>;
    getContractFactory(
      name: "VaultMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultMock__factory>;
    getContractFactory(
      name: "VaultsRegistryMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultsRegistryMock__factory>;
    getContractFactory(
      name: "VaultsRegistryV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultsRegistryV2__factory>;
    getContractFactory(
      name: "VaultV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultV2__factory>;
    getContractFactory(
      name: "BaseAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseAdapter__factory>;
    getContractFactory(
      name: "EtherFiAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EtherFiAdapter__factory>;
    getContractFactory(
      name: "IEtherFiLiqudityPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEtherFiLiqudityPool__factory>;
    getContractFactory(
      name: "IEtherFiLiquifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEtherFiLiquifier__factory>;
    getContractFactory(
      name: "IEtherFiWithdrawRequestNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEtherFiWithdrawRequestNFT__factory>;
    getContractFactory(
      name: "IweETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IweETH__factory>;
    getContractFactory(
      name: "IKelpProtocol",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKelpProtocol__factory>;
    getContractFactory(
      name: "KelpAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KelpAdapter__factory>;
    getContractFactory(
      name: "ILidoProtocol",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILidoProtocol__factory>;
    getContractFactory(
      name: "IwstETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IwstETH__factory>;
    getContractFactory(
      name: "LidoAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LidoAdapter__factory>;
    getContractFactory(
      name: "IRenzoLiquifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRenzoLiquifier__factory>;
    getContractFactory(
      name: "RenzoAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RenzoAdapter__factory>;
    getContractFactory(
      name: "IRETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRETH__factory>;
    getContractFactory(
      name: "IRocketDAOProtocolSettingsDeposit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRocketDAOProtocolSettingsDeposit__factory>;
    getContractFactory(
      name: "IRocketDepositPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRocketDepositPool__factory>;
    getContractFactory(
      name: "RocketAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RocketAdapter__factory>;
    getContractFactory(
      name: "IStaderStakePoolsManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStaderStakePoolsManager__factory>;
    getContractFactory(
      name: "StaderAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StaderAdapter__factory>;
    getContractFactory(
      name: "IUniswapV3Protocol",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3Protocol__factory>;
    getContractFactory(
      name: "UniswapV3Adapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV3Adapter__factory>;
    getContractFactory(
      name: "AggregatorToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorToken__factory>;
    getContractFactory(
      name: "BaseAggregatorToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseAggregatorToken__factory>;
    getContractFactory(
      name: "BaseStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseStrategy__factory>;
    getContractFactory(
      name: "BaseVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseVault__factory>;
    getContractFactory(
      name: "Counter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Counter__factory>;
    getContractFactory(
      name: "IAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAdapter__factory>;
    getContractFactory(
      name: "IAggregatorToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAggregatorToken__factory>;
    getContractFactory(
      name: "IBaseAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBaseAdapter__factory>;
    getContractFactory(
      name: "IBaseStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBaseStrategy__factory>;
    getContractFactory(
      name: "ICounter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICounter__factory>;
    getContractFactory(
      name: "IDeployStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDeployStrategy__factory>;
    getContractFactory(
      name: "IExternalProtocol",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExternalProtocol__factory>;
    getContractFactory(
      name: "IGenericWrapping",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGenericWrapping__factory>;
    getContractFactory(
      name: "IMasterToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMasterToken__factory>;
    getContractFactory(
      name: "ITransferStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITransferStrategy__factory>;
    getContractFactory(
      name: "IVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVault__factory>;
    getContractFactory(
      name: "IVaultsRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVaultsRegistry__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "IWithdrawStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWithdrawStrategy__factory>;
    getContractFactory(
      name: "UniformTransferStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniformTransferStrategy__factory>;
    getContractFactory(
      name: "Vault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Vault__factory>;
    getContractFactory(
      name: "VaultsRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultsRegistry__factory>;
    getContractFactory(
      name: "StrSimpleReStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StrSimpleReStaking__factory>;
    getContractFactory(
      name: "StrSimpleStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StrSimpleStaking__factory>;
    getContractFactory(
      name: "StrWithdrawStandard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StrWithdrawStandard__factory>;

    getContractAt(
      name: "AggregatorV3Interface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "AccessControlUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "ERC4626Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC4626Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "ReentrancyGuardUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    getContractAt(
      name: "AccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1155Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Errors>;
    getContractAt(
      name: "IERC20Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC721Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Errors>;
    getContractAt(
      name: "IERC4626",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC4626>;
    getContractAt(
      name: "BeaconProxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BeaconProxy>;
    getContractAt(
      name: "IBeacon",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "UpgradeableBeacon",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeableBeacon>;
    getContractAt(
      name: "ERC1967Utils",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Utils>;
    getContractAt(
      name: "Proxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "SafeERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeERC20>;
    getContractAt(
      name: "Address",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Address>;
    getContractAt(
      name: "ERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Math",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Math>;
    getContractAt(
      name: "AdapterMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AdapterMock>;
    getContractAt(
      name: "EtherFiMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EtherFiMock>;
    getContractAt(
      name: "KelpMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.KelpMock>;
    getContractAt(
      name: "LidoMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LidoMock>;
    getContractAt(
      name: "RenzoProtocolMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RenzoProtocolMock>;
    getContractAt(
      name: "RocketPoolMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RocketPoolMock>;
    getContractAt(
      name: "RocketSettingsMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RocketSettingsMock>;
    getContractAt(
      name: "StaderMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StaderMock>;
    getContractAt(
      name: "TestnetAdapterMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestnetAdapterMock>;
    getContractAt(
      name: "UniswapPoolMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapPoolMock>;
    getContractAt(
      name: "UniswapV3QuoterMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV3QuoterMock>;
    getContractAt(
      name: "UniswapV3RouterMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV3RouterMock>;
    getContractAt(
      name: "DepositStrategyMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DepositStrategyMock>;
    getContractAt(
      name: "MasterTokenMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MasterTokenMock>;
    getContractAt(
      name: "OracleMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleMock>;
    getContractAt(
      name: "ProtocolMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ProtocolMock>;
    getContractAt(
      name: "StrSimpleReStakingV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StrSimpleReStakingV2>;
    getContractAt(
      name: "EETHMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EETHMock>;
    getContractAt(
      name: "ERC20CustomInherits",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20CustomInherits>;
    getContractAt(
      name: "ERC20Mock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Mock>;
    getContractAt(
      name: "GenericWrapperMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GenericWrapperMock>;
    getContractAt(
      name: "RETHMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RETHMock>;
    getContractAt(
      name: "WEETHMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WEETHMock>;
    getContractAt(
      name: "WETHMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WETHMock>;
    getContractAt(
      name: "WstETHMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WstETHMock>;
    getContractAt(
      name: "VaultMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultMock>;
    getContractAt(
      name: "VaultsRegistryMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultsRegistryMock>;
    getContractAt(
      name: "VaultsRegistryV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultsRegistryV2>;
    getContractAt(
      name: "VaultV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultV2>;
    getContractAt(
      name: "BaseAdapter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseAdapter>;
    getContractAt(
      name: "EtherFiAdapter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EtherFiAdapter>;
    getContractAt(
      name: "IEtherFiLiqudityPool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEtherFiLiqudityPool>;
    getContractAt(
      name: "IEtherFiLiquifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEtherFiLiquifier>;
    getContractAt(
      name: "IEtherFiWithdrawRequestNFT",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEtherFiWithdrawRequestNFT>;
    getContractAt(
      name: "IweETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IweETH>;
    getContractAt(
      name: "IKelpProtocol",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IKelpProtocol>;
    getContractAt(
      name: "KelpAdapter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.KelpAdapter>;
    getContractAt(
      name: "ILidoProtocol",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ILidoProtocol>;
    getContractAt(
      name: "IwstETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IwstETH>;
    getContractAt(
      name: "LidoAdapter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LidoAdapter>;
    getContractAt(
      name: "IRenzoLiquifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRenzoLiquifier>;
    getContractAt(
      name: "RenzoAdapter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RenzoAdapter>;
    getContractAt(
      name: "IRETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRETH>;
    getContractAt(
      name: "IRocketDAOProtocolSettingsDeposit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRocketDAOProtocolSettingsDeposit>;
    getContractAt(
      name: "IRocketDepositPool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRocketDepositPool>;
    getContractAt(
      name: "RocketAdapter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RocketAdapter>;
    getContractAt(
      name: "IStaderStakePoolsManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IStaderStakePoolsManager>;
    getContractAt(
      name: "StaderAdapter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StaderAdapter>;
    getContractAt(
      name: "IUniswapV3Protocol",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3Protocol>;
    getContractAt(
      name: "UniswapV3Adapter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV3Adapter>;
    getContractAt(
      name: "AggregatorToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorToken>;
    getContractAt(
      name: "BaseAggregatorToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseAggregatorToken>;
    getContractAt(
      name: "BaseStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseStrategy>;
    getContractAt(
      name: "BaseVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseVault>;
    getContractAt(
      name: "Counter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Counter>;
    getContractAt(
      name: "IAdapter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAdapter>;
    getContractAt(
      name: "IAggregatorToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAggregatorToken>;
    getContractAt(
      name: "IBaseAdapter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBaseAdapter>;
    getContractAt(
      name: "IBaseStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBaseStrategy>;
    getContractAt(
      name: "ICounter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ICounter>;
    getContractAt(
      name: "IDeployStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDeployStrategy>;
    getContractAt(
      name: "IExternalProtocol",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IExternalProtocol>;
    getContractAt(
      name: "IGenericWrapping",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IGenericWrapping>;
    getContractAt(
      name: "IMasterToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMasterToken>;
    getContractAt(
      name: "ITransferStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITransferStrategy>;
    getContractAt(
      name: "IVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IVault>;
    getContractAt(
      name: "IVaultsRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IVaultsRegistry>;
    getContractAt(
      name: "IWETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "IWithdrawStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWithdrawStrategy>;
    getContractAt(
      name: "UniformTransferStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniformTransferStrategy>;
    getContractAt(
      name: "Vault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Vault>;
    getContractAt(
      name: "VaultsRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultsRegistry>;
    getContractAt(
      name: "StrSimpleReStaking",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StrSimpleReStaking>;
    getContractAt(
      name: "StrSimpleStaking",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StrSimpleStaking>;
    getContractAt(
      name: "StrWithdrawStandard",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StrWithdrawStandard>;

    deployContract(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AggregatorV3Interface>;
    deployContract(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControlUpgradeable>;
    deployContract(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Upgradeable>;
    deployContract(
      name: "ERC4626Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC4626Upgradeable>;
    deployContract(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContextUpgradeable>;
    deployContract(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165Upgradeable>;
    deployContract(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PausableUpgradeable>;
    deployContract(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    deployContract(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "IERC4626",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC4626>;
    deployContract(
      name: "BeaconProxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BeaconProxy>;
    deployContract(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBeacon>;
    deployContract(
      name: "UpgradeableBeacon",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UpgradeableBeacon>;
    deployContract(
      name: "ERC1967Utils",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967Utils>;
    deployContract(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Proxy>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "Address",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "Math",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Math>;
    deployContract(
      name: "AdapterMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AdapterMock>;
    deployContract(
      name: "EtherFiMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EtherFiMock>;
    deployContract(
      name: "KelpMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.KelpMock>;
    deployContract(
      name: "LidoMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LidoMock>;
    deployContract(
      name: "RenzoProtocolMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RenzoProtocolMock>;
    deployContract(
      name: "RocketPoolMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RocketPoolMock>;
    deployContract(
      name: "RocketSettingsMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RocketSettingsMock>;
    deployContract(
      name: "StaderMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StaderMock>;
    deployContract(
      name: "TestnetAdapterMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestnetAdapterMock>;
    deployContract(
      name: "UniswapPoolMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapPoolMock>;
    deployContract(
      name: "UniswapV3QuoterMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapV3QuoterMock>;
    deployContract(
      name: "UniswapV3RouterMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapV3RouterMock>;
    deployContract(
      name: "DepositStrategyMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DepositStrategyMock>;
    deployContract(
      name: "MasterTokenMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MasterTokenMock>;
    deployContract(
      name: "OracleMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OracleMock>;
    deployContract(
      name: "ProtocolMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ProtocolMock>;
    deployContract(
      name: "StrSimpleReStakingV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StrSimpleReStakingV2>;
    deployContract(
      name: "EETHMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EETHMock>;
    deployContract(
      name: "ERC20CustomInherits",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20CustomInherits>;
    deployContract(
      name: "ERC20Mock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Mock>;
    deployContract(
      name: "GenericWrapperMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GenericWrapperMock>;
    deployContract(
      name: "RETHMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RETHMock>;
    deployContract(
      name: "WEETHMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WEETHMock>;
    deployContract(
      name: "WETHMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WETHMock>;
    deployContract(
      name: "WstETHMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WstETHMock>;
    deployContract(
      name: "VaultMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VaultMock>;
    deployContract(
      name: "VaultsRegistryMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VaultsRegistryMock>;
    deployContract(
      name: "VaultsRegistryV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VaultsRegistryV2>;
    deployContract(
      name: "VaultV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VaultV2>;
    deployContract(
      name: "BaseAdapter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseAdapter>;
    deployContract(
      name: "EtherFiAdapter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EtherFiAdapter>;
    deployContract(
      name: "IEtherFiLiqudityPool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEtherFiLiqudityPool>;
    deployContract(
      name: "IEtherFiLiquifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEtherFiLiquifier>;
    deployContract(
      name: "IEtherFiWithdrawRequestNFT",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEtherFiWithdrawRequestNFT>;
    deployContract(
      name: "IweETH",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IweETH>;
    deployContract(
      name: "IKelpProtocol",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IKelpProtocol>;
    deployContract(
      name: "KelpAdapter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.KelpAdapter>;
    deployContract(
      name: "ILidoProtocol",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILidoProtocol>;
    deployContract(
      name: "IwstETH",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IwstETH>;
    deployContract(
      name: "LidoAdapter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LidoAdapter>;
    deployContract(
      name: "IRenzoLiquifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRenzoLiquifier>;
    deployContract(
      name: "RenzoAdapter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RenzoAdapter>;
    deployContract(
      name: "IRETH",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRETH>;
    deployContract(
      name: "IRocketDAOProtocolSettingsDeposit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRocketDAOProtocolSettingsDeposit>;
    deployContract(
      name: "IRocketDepositPool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRocketDepositPool>;
    deployContract(
      name: "RocketAdapter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RocketAdapter>;
    deployContract(
      name: "IStaderStakePoolsManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStaderStakePoolsManager>;
    deployContract(
      name: "StaderAdapter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StaderAdapter>;
    deployContract(
      name: "IUniswapV3Protocol",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV3Protocol>;
    deployContract(
      name: "UniswapV3Adapter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapV3Adapter>;
    deployContract(
      name: "AggregatorToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AggregatorToken>;
    deployContract(
      name: "BaseAggregatorToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseAggregatorToken>;
    deployContract(
      name: "BaseStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseStrategy>;
    deployContract(
      name: "BaseVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseVault>;
    deployContract(
      name: "Counter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Counter>;
    deployContract(
      name: "IAdapter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAdapter>;
    deployContract(
      name: "IAggregatorToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAggregatorToken>;
    deployContract(
      name: "IBaseAdapter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBaseAdapter>;
    deployContract(
      name: "IBaseStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBaseStrategy>;
    deployContract(
      name: "ICounter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICounter>;
    deployContract(
      name: "IDeployStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDeployStrategy>;
    deployContract(
      name: "IExternalProtocol",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExternalProtocol>;
    deployContract(
      name: "IGenericWrapping",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGenericWrapping>;
    deployContract(
      name: "IMasterToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMasterToken>;
    deployContract(
      name: "ITransferStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITransferStrategy>;
    deployContract(
      name: "IVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVault>;
    deployContract(
      name: "IVaultsRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVaultsRegistry>;
    deployContract(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "IWithdrawStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWithdrawStrategy>;
    deployContract(
      name: "UniformTransferStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniformTransferStrategy>;
    deployContract(
      name: "Vault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Vault>;
    deployContract(
      name: "VaultsRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VaultsRegistry>;
    deployContract(
      name: "StrSimpleReStaking",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StrSimpleReStaking>;
    deployContract(
      name: "StrSimpleStaking",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StrSimpleStaking>;
    deployContract(
      name: "StrWithdrawStandard",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StrWithdrawStandard>;

    deployContract(
      name: "AggregatorV3Interface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AggregatorV3Interface>;
    deployContract(
      name: "AccessControlUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControlUpgradeable>;
    deployContract(
      name: "Initializable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "ERC20Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Upgradeable>;
    deployContract(
      name: "ERC4626Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC4626Upgradeable>;
    deployContract(
      name: "ContextUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContextUpgradeable>;
    deployContract(
      name: "ERC165Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165Upgradeable>;
    deployContract(
      name: "PausableUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PausableUpgradeable>;
    deployContract(
      name: "ReentrancyGuardUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    deployContract(
      name: "AccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "IAccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1155Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "IERC4626",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC4626>;
    deployContract(
      name: "BeaconProxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BeaconProxy>;
    deployContract(
      name: "IBeacon",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBeacon>;
    deployContract(
      name: "UpgradeableBeacon",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UpgradeableBeacon>;
    deployContract(
      name: "ERC1967Utils",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967Utils>;
    deployContract(
      name: "Proxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Proxy>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "Address",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "ERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "Math",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Math>;
    deployContract(
      name: "AdapterMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AdapterMock>;
    deployContract(
      name: "EtherFiMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EtherFiMock>;
    deployContract(
      name: "KelpMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.KelpMock>;
    deployContract(
      name: "LidoMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LidoMock>;
    deployContract(
      name: "RenzoProtocolMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RenzoProtocolMock>;
    deployContract(
      name: "RocketPoolMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RocketPoolMock>;
    deployContract(
      name: "RocketSettingsMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RocketSettingsMock>;
    deployContract(
      name: "StaderMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StaderMock>;
    deployContract(
      name: "TestnetAdapterMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestnetAdapterMock>;
    deployContract(
      name: "UniswapPoolMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapPoolMock>;
    deployContract(
      name: "UniswapV3QuoterMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapV3QuoterMock>;
    deployContract(
      name: "UniswapV3RouterMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapV3RouterMock>;
    deployContract(
      name: "DepositStrategyMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DepositStrategyMock>;
    deployContract(
      name: "MasterTokenMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MasterTokenMock>;
    deployContract(
      name: "OracleMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OracleMock>;
    deployContract(
      name: "ProtocolMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ProtocolMock>;
    deployContract(
      name: "StrSimpleReStakingV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StrSimpleReStakingV2>;
    deployContract(
      name: "EETHMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EETHMock>;
    deployContract(
      name: "ERC20CustomInherits",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20CustomInherits>;
    deployContract(
      name: "ERC20Mock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Mock>;
    deployContract(
      name: "GenericWrapperMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GenericWrapperMock>;
    deployContract(
      name: "RETHMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RETHMock>;
    deployContract(
      name: "WEETHMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WEETHMock>;
    deployContract(
      name: "WETHMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WETHMock>;
    deployContract(
      name: "WstETHMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WstETHMock>;
    deployContract(
      name: "VaultMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VaultMock>;
    deployContract(
      name: "VaultsRegistryMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VaultsRegistryMock>;
    deployContract(
      name: "VaultsRegistryV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VaultsRegistryV2>;
    deployContract(
      name: "VaultV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VaultV2>;
    deployContract(
      name: "BaseAdapter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseAdapter>;
    deployContract(
      name: "EtherFiAdapter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EtherFiAdapter>;
    deployContract(
      name: "IEtherFiLiqudityPool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEtherFiLiqudityPool>;
    deployContract(
      name: "IEtherFiLiquifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEtherFiLiquifier>;
    deployContract(
      name: "IEtherFiWithdrawRequestNFT",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEtherFiWithdrawRequestNFT>;
    deployContract(
      name: "IweETH",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IweETH>;
    deployContract(
      name: "IKelpProtocol",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IKelpProtocol>;
    deployContract(
      name: "KelpAdapter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.KelpAdapter>;
    deployContract(
      name: "ILidoProtocol",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILidoProtocol>;
    deployContract(
      name: "IwstETH",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IwstETH>;
    deployContract(
      name: "LidoAdapter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LidoAdapter>;
    deployContract(
      name: "IRenzoLiquifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRenzoLiquifier>;
    deployContract(
      name: "RenzoAdapter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RenzoAdapter>;
    deployContract(
      name: "IRETH",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRETH>;
    deployContract(
      name: "IRocketDAOProtocolSettingsDeposit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRocketDAOProtocolSettingsDeposit>;
    deployContract(
      name: "IRocketDepositPool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRocketDepositPool>;
    deployContract(
      name: "RocketAdapter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RocketAdapter>;
    deployContract(
      name: "IStaderStakePoolsManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStaderStakePoolsManager>;
    deployContract(
      name: "StaderAdapter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StaderAdapter>;
    deployContract(
      name: "IUniswapV3Protocol",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV3Protocol>;
    deployContract(
      name: "UniswapV3Adapter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapV3Adapter>;
    deployContract(
      name: "AggregatorToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AggregatorToken>;
    deployContract(
      name: "BaseAggregatorToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseAggregatorToken>;
    deployContract(
      name: "BaseStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseStrategy>;
    deployContract(
      name: "BaseVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseVault>;
    deployContract(
      name: "Counter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Counter>;
    deployContract(
      name: "IAdapter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAdapter>;
    deployContract(
      name: "IAggregatorToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAggregatorToken>;
    deployContract(
      name: "IBaseAdapter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBaseAdapter>;
    deployContract(
      name: "IBaseStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBaseStrategy>;
    deployContract(
      name: "ICounter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICounter>;
    deployContract(
      name: "IDeployStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDeployStrategy>;
    deployContract(
      name: "IExternalProtocol",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExternalProtocol>;
    deployContract(
      name: "IGenericWrapping",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGenericWrapping>;
    deployContract(
      name: "IMasterToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMasterToken>;
    deployContract(
      name: "ITransferStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITransferStrategy>;
    deployContract(
      name: "IVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVault>;
    deployContract(
      name: "IVaultsRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVaultsRegistry>;
    deployContract(
      name: "IWETH",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "IWithdrawStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWithdrawStrategy>;
    deployContract(
      name: "UniformTransferStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniformTransferStrategy>;
    deployContract(
      name: "Vault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Vault>;
    deployContract(
      name: "VaultsRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VaultsRegistry>;
    deployContract(
      name: "StrSimpleReStaking",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StrSimpleReStaking>;
    deployContract(
      name: "StrSimpleStaking",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StrSimpleStaking>;
    deployContract(
      name: "StrWithdrawStandard",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StrWithdrawStandard>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
