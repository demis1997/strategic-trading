/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface TestnetAdapterMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "VAULT_STRATEGY_ROLE"
      | "adapterName"
      | "claimEarnings"
      | "deposit"
      | "getAmountInForexactOutput"
      | "getProtocol"
      | "getRoleAdmin"
      | "getSlippage"
      | "getTokenPrice"
      | "grantRole"
      | "hasRole"
      | "percentageModifierDeposit"
      | "percentageModifierWithdraw"
      | "protocolAddress"
      | "protocolName"
      | "renounceRole"
      | "revokeRole"
      | "setPercentageDeposit"
      | "setPercentageWithdraw"
      | "setProtocolData"
      | "setSlippage"
      | "slippage"
      | "supportsInterface"
      | "tokenInDeposit"
      | "tokenInWithdraw"
      | "tokenOutDeposit"
      | "tokenOutWithdraw"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddressUpdated"
      | "DepositedOnProtocol"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SlippageUpdated"
      | "WithdrawFromProtocol"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VAULT_STRATEGY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adapterName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimEarnings",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountInForexactOutput",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSlippage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPrice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "percentageModifierDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "percentageModifierWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPercentageDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPercentageWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolData",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSlippage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "slippage", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenInDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenInWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOutDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOutWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VAULT_STRATEGY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adapterName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountInForexactOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "percentageModifierDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "percentageModifierWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPercentageDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPercentageWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slippage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenInDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenInWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOutDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOutWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace AddressUpdatedEvent {
  export type InputTuple = [which: string, newAddress: AddressLike];
  export type OutputTuple = [which: string, newAddress: string];
  export interface OutputObject {
    which: string;
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedOnProtocolEvent {
  export type InputTuple = [
    sender: AddressLike,
    token: AddressLike,
    tokenAmount: BigNumberish,
    liquidTkn: AddressLike,
    liquidTknAmount: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    token: string,
    tokenAmount: bigint,
    liquidTkn: string,
    liquidTknAmount: bigint
  ];
  export interface OutputObject {
    sender: string;
    token: string;
    tokenAmount: bigint;
    liquidTkn: string;
    liquidTknAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SlippageUpdatedEvent {
  export type InputTuple = [newSlippage: BigNumberish];
  export type OutputTuple = [newSlippage: bigint];
  export interface OutputObject {
    newSlippage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawFromProtocolEvent {
  export type InputTuple = [
    caller_: AddressLike,
    receiver_: AddressLike,
    liquidTokenAddress_: AddressLike,
    amountSpent: BigNumberish,
    asset_: AddressLike,
    assetsAmount_: BigNumberish
  ];
  export type OutputTuple = [
    caller_: string,
    receiver_: string,
    liquidTokenAddress_: string,
    amountSpent: bigint,
    asset_: string,
    assetsAmount_: bigint
  ];
  export interface OutputObject {
    caller_: string;
    receiver_: string;
    liquidTokenAddress_: string;
    amountSpent: bigint;
    asset_: string;
    assetsAmount_: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TestnetAdapterMock extends BaseContract {
  connect(runner?: ContractRunner | null): TestnetAdapterMock;
  waitForDeployment(): Promise<this>;

  interface: TestnetAdapterMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  VAULT_STRATEGY_ROLE: TypedContractMethod<[], [string], "view">;

  adapterName: TypedContractMethod<[], [string], "view">;

  claimEarnings: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [[string, bigint]],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [
      sender_: AddressLike,
      receiver_: AddressLike,
      arg2: AddressLike,
      tokenAmount_: BigNumberish,
      arg4: boolean
    ],
    [[string, bigint]],
    "nonpayable"
  >;

  getAmountInForexactOutput: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getProtocol: TypedContractMethod<[], [string], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getSlippage: TypedContractMethod<[], [bigint], "view">;

  getTokenPrice: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  percentageModifierDeposit: TypedContractMethod<[], [bigint], "view">;

  percentageModifierWithdraw: TypedContractMethod<[], [bigint], "view">;

  protocolAddress: TypedContractMethod<[], [string], "view">;

  protocolName: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setPercentageDeposit: TypedContractMethod<
    [percentage_: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPercentageWithdraw: TypedContractMethod<
    [percentage_: BigNumberish],
    [void],
    "nonpayable"
  >;

  setProtocolData: TypedContractMethod<
    [protocolName_: string, protocolAddress_: AddressLike],
    [void],
    "nonpayable"
  >;

  setSlippage: TypedContractMethod<
    [slippage_: BigNumberish],
    [void],
    "nonpayable"
  >;

  slippage: TypedContractMethod<[], [bigint], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tokenInDeposit: TypedContractMethod<[], [string], "view">;

  tokenInWithdraw: TypedContractMethod<[], [string], "view">;

  tokenOutDeposit: TypedContractMethod<[], [string], "view">;

  tokenOutWithdraw: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<
    [
      sender_: AddressLike,
      receiver_: AddressLike,
      arg2: AddressLike,
      amountToReturn_: BigNumberish,
      arg4: AddressLike,
      amountSent_: BigNumberish,
      arg6: BytesLike
    ],
    [[string, bigint]],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VAULT_STRATEGY_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "adapterName"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimEarnings"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [[string, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [
      sender_: AddressLike,
      receiver_: AddressLike,
      arg2: AddressLike,
      tokenAmount_: BigNumberish,
      arg4: boolean
    ],
    [[string, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAmountInForexactOutput"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getProtocol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getSlippage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenPrice"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "percentageModifierDeposit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "percentageModifierWithdraw"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "protocolAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolName"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPercentageDeposit"
  ): TypedContractMethod<[percentage_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPercentageWithdraw"
  ): TypedContractMethod<[percentage_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProtocolData"
  ): TypedContractMethod<
    [protocolName_: string, protocolAddress_: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSlippage"
  ): TypedContractMethod<[slippage_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "slippage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenInDeposit"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenInWithdraw"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenOutDeposit"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenOutWithdraw"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [
      sender_: AddressLike,
      receiver_: AddressLike,
      arg2: AddressLike,
      amountToReturn_: BigNumberish,
      arg4: AddressLike,
      amountSent_: BigNumberish,
      arg6: BytesLike
    ],
    [[string, bigint]],
    "nonpayable"
  >;

  getEvent(
    key: "AddressUpdated"
  ): TypedContractEvent<
    AddressUpdatedEvent.InputTuple,
    AddressUpdatedEvent.OutputTuple,
    AddressUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DepositedOnProtocol"
  ): TypedContractEvent<
    DepositedOnProtocolEvent.InputTuple,
    DepositedOnProtocolEvent.OutputTuple,
    DepositedOnProtocolEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SlippageUpdated"
  ): TypedContractEvent<
    SlippageUpdatedEvent.InputTuple,
    SlippageUpdatedEvent.OutputTuple,
    SlippageUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawFromProtocol"
  ): TypedContractEvent<
    WithdrawFromProtocolEvent.InputTuple,
    WithdrawFromProtocolEvent.OutputTuple,
    WithdrawFromProtocolEvent.OutputObject
  >;

  filters: {
    "AddressUpdated(string,address)": TypedContractEvent<
      AddressUpdatedEvent.InputTuple,
      AddressUpdatedEvent.OutputTuple,
      AddressUpdatedEvent.OutputObject
    >;
    AddressUpdated: TypedContractEvent<
      AddressUpdatedEvent.InputTuple,
      AddressUpdatedEvent.OutputTuple,
      AddressUpdatedEvent.OutputObject
    >;

    "DepositedOnProtocol(address,address,uint256,address,uint256)": TypedContractEvent<
      DepositedOnProtocolEvent.InputTuple,
      DepositedOnProtocolEvent.OutputTuple,
      DepositedOnProtocolEvent.OutputObject
    >;
    DepositedOnProtocol: TypedContractEvent<
      DepositedOnProtocolEvent.InputTuple,
      DepositedOnProtocolEvent.OutputTuple,
      DepositedOnProtocolEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SlippageUpdated(uint256)": TypedContractEvent<
      SlippageUpdatedEvent.InputTuple,
      SlippageUpdatedEvent.OutputTuple,
      SlippageUpdatedEvent.OutputObject
    >;
    SlippageUpdated: TypedContractEvent<
      SlippageUpdatedEvent.InputTuple,
      SlippageUpdatedEvent.OutputTuple,
      SlippageUpdatedEvent.OutputObject
    >;

    "WithdrawFromProtocol(address,address,address,uint256,address,uint256)": TypedContractEvent<
      WithdrawFromProtocolEvent.InputTuple,
      WithdrawFromProtocolEvent.OutputTuple,
      WithdrawFromProtocolEvent.OutputObject
    >;
    WithdrawFromProtocol: TypedContractEvent<
      WithdrawFromProtocolEvent.InputTuple,
      WithdrawFromProtocolEvent.OutputTuple,
      WithdrawFromProtocolEvent.OutputObject
    >;
  };
}
