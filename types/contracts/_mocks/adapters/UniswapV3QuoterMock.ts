/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface UniswapV3QuoterMockInterface extends Interface {
  getFunction(
    nameOrSignature: "amountIn" | "quoteExactOutput" | "setQuoteExactOutput"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "amountIn", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quoteExactOutput",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setQuoteExactOutput",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "amountIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteExactOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setQuoteExactOutput",
    data: BytesLike
  ): Result;
}

export interface UniswapV3QuoterMock extends BaseContract {
  connect(runner?: ContractRunner | null): UniswapV3QuoterMock;
  waitForDeployment(): Promise<this>;

  interface: UniswapV3QuoterMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  amountIn: TypedContractMethod<[], [bigint], "view">;

  quoteExactOutput: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [
      [bigint, bigint[], bigint[], bigint] & {
        sqrtPriceX96AfterList: bigint[];
        initializedTicksCrossedList: bigint[];
        gasEstimate: bigint;
      }
    ],
    "view"
  >;

  setQuoteExactOutput: TypedContractMethod<
    [amountIn_: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "amountIn"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "quoteExactOutput"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [
      [bigint, bigint[], bigint[], bigint] & {
        sqrtPriceX96AfterList: bigint[];
        initializedTicksCrossedList: bigint[];
        gasEstimate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setQuoteExactOutput"
  ): TypedContractMethod<[amountIn_: BigNumberish], [void], "nonpayable">;

  filters: {};
}
