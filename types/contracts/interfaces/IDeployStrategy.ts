/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IDeployStrategyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "executeDeploymentStrategy"
      | "executeHarvest"
      | "executeWithdrawStrategy"
      | "getDeployedAssetsValue"
      | "getFirstDepositAdapter"
      | "updateDeployedAssetVaule"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdaptersDeployPathSet"
      | "AdaptersWithdrawPathSet"
      | "DeployedAssetsValueUpdated"
      | "DeploymentStrategyExecuted"
      | "LiquidTokenSet"
      | "PriceFeedSet"
      | "StrategyNameSet"
      | "TokenWrapperSet"
      | "VaultAddressSet"
      | "WithdrawStrategyAddressSet"
      | "WithdrawStrategyExecuted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "executeDeploymentStrategy",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeHarvest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeWithdrawStrategy",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployedAssetsValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFirstDepositAdapter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateDeployedAssetVaule",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "executeDeploymentStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeHarvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeWithdrawStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployedAssetsValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFirstDepositAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDeployedAssetVaule",
    data: BytesLike
  ): Result;
}

export namespace AdaptersDeployPathSetEvent {
  export type InputTuple = [newDeployPath: AddressLike[]];
  export type OutputTuple = [newDeployPath: string[]];
  export interface OutputObject {
    newDeployPath: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdaptersWithdrawPathSetEvent {
  export type InputTuple = [newWithdrawPath: AddressLike[]];
  export type OutputTuple = [newWithdrawPath: string[]];
  export interface OutputObject {
    newWithdrawPath: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeployedAssetsValueUpdatedEvent {
  export type InputTuple = [
    liquidTokenAddress: AddressLike,
    deployedAssetsValueETH: BigNumberish,
    strategyContract: AddressLike
  ];
  export type OutputTuple = [
    liquidTokenAddress: string,
    deployedAssetsValueETH: bigint,
    strategyContract: string
  ];
  export interface OutputObject {
    liquidTokenAddress: string;
    deployedAssetsValueETH: bigint;
    strategyContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeploymentStrategyExecutedEvent {
  export type InputTuple = [
    assets: AddressLike,
    assetsAmount: BigNumberish,
    liquidToken: AddressLike,
    liquidTokenAmount: BigNumberish
  ];
  export type OutputTuple = [
    assets: string,
    assetsAmount: bigint,
    liquidToken: string,
    liquidTokenAmount: bigint
  ];
  export interface OutputObject {
    assets: string;
    assetsAmount: bigint;
    liquidToken: string;
    liquidTokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidTokenSetEvent {
  export type InputTuple = [arg0: AddressLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceFeedSetEvent {
  export type InputTuple = [token: AddressLike, priceFeed: AddressLike];
  export type OutputTuple = [token: string, priceFeed: string];
  export interface OutputObject {
    token: string;
    priceFeed: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyNameSetEvent {
  export type InputTuple = [name: string];
  export type OutputTuple = [name: string];
  export interface OutputObject {
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenWrapperSetEvent {
  export type InputTuple = [arg0: AddressLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultAddressSetEvent {
  export type InputTuple = [vaultAddress: AddressLike];
  export type OutputTuple = [vaultAddress: string];
  export interface OutputObject {
    vaultAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawStrategyAddressSetEvent {
  export type InputTuple = [strategyAddress: AddressLike];
  export type OutputTuple = [strategyAddress: string];
  export interface OutputObject {
    strategyAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawStrategyExecutedEvent {
  export type InputTuple = [
    receiver: AddressLike,
    asset: AddressLike,
    assetsAmount: BigNumberish
  ];
  export type OutputTuple = [
    receiver: string,
    asset: string,
    assetsAmount: bigint
  ];
  export interface OutputObject {
    receiver: string;
    asset: string;
    assetsAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDeployStrategy extends BaseContract {
  connect(runner?: ContractRunner | null): IDeployStrategy;
  waitForDeployment(): Promise<this>;

  interface: IDeployStrategyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  executeDeploymentStrategy: TypedContractMethod<
    [
      sender: AddressLike,
      receiver: AddressLike,
      asset: AddressLike,
      assetsAmount: BigNumberish
    ],
    [[string, bigint]],
    "nonpayable"
  >;

  executeHarvest: TypedContractMethod<[], [[string, bigint]], "nonpayable">;

  executeWithdrawStrategy: TypedContractMethod<
    [receiver: AddressLike, asset: AddressLike, assetsAmount: BigNumberish],
    [[string, bigint]],
    "nonpayable"
  >;

  getDeployedAssetsValue: TypedContractMethod<[], [bigint], "view">;

  getFirstDepositAdapter: TypedContractMethod<[], [string], "nonpayable">;

  updateDeployedAssetVaule: TypedContractMethod<
    [source_: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "executeDeploymentStrategy"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      receiver: AddressLike,
      asset: AddressLike,
      assetsAmount: BigNumberish
    ],
    [[string, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeHarvest"
  ): TypedContractMethod<[], [[string, bigint]], "nonpayable">;
  getFunction(
    nameOrSignature: "executeWithdrawStrategy"
  ): TypedContractMethod<
    [receiver: AddressLike, asset: AddressLike, assetsAmount: BigNumberish],
    [[string, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getDeployedAssetsValue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFirstDepositAdapter"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "updateDeployedAssetVaule"
  ): TypedContractMethod<[source_: BigNumberish], [bigint], "nonpayable">;

  getEvent(
    key: "AdaptersDeployPathSet"
  ): TypedContractEvent<
    AdaptersDeployPathSetEvent.InputTuple,
    AdaptersDeployPathSetEvent.OutputTuple,
    AdaptersDeployPathSetEvent.OutputObject
  >;
  getEvent(
    key: "AdaptersWithdrawPathSet"
  ): TypedContractEvent<
    AdaptersWithdrawPathSetEvent.InputTuple,
    AdaptersWithdrawPathSetEvent.OutputTuple,
    AdaptersWithdrawPathSetEvent.OutputObject
  >;
  getEvent(
    key: "DeployedAssetsValueUpdated"
  ): TypedContractEvent<
    DeployedAssetsValueUpdatedEvent.InputTuple,
    DeployedAssetsValueUpdatedEvent.OutputTuple,
    DeployedAssetsValueUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DeploymentStrategyExecuted"
  ): TypedContractEvent<
    DeploymentStrategyExecutedEvent.InputTuple,
    DeploymentStrategyExecutedEvent.OutputTuple,
    DeploymentStrategyExecutedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidTokenSet"
  ): TypedContractEvent<
    LiquidTokenSetEvent.InputTuple,
    LiquidTokenSetEvent.OutputTuple,
    LiquidTokenSetEvent.OutputObject
  >;
  getEvent(
    key: "PriceFeedSet"
  ): TypedContractEvent<
    PriceFeedSetEvent.InputTuple,
    PriceFeedSetEvent.OutputTuple,
    PriceFeedSetEvent.OutputObject
  >;
  getEvent(
    key: "StrategyNameSet"
  ): TypedContractEvent<
    StrategyNameSetEvent.InputTuple,
    StrategyNameSetEvent.OutputTuple,
    StrategyNameSetEvent.OutputObject
  >;
  getEvent(
    key: "TokenWrapperSet"
  ): TypedContractEvent<
    TokenWrapperSetEvent.InputTuple,
    TokenWrapperSetEvent.OutputTuple,
    TokenWrapperSetEvent.OutputObject
  >;
  getEvent(
    key: "VaultAddressSet"
  ): TypedContractEvent<
    VaultAddressSetEvent.InputTuple,
    VaultAddressSetEvent.OutputTuple,
    VaultAddressSetEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawStrategyAddressSet"
  ): TypedContractEvent<
    WithdrawStrategyAddressSetEvent.InputTuple,
    WithdrawStrategyAddressSetEvent.OutputTuple,
    WithdrawStrategyAddressSetEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawStrategyExecuted"
  ): TypedContractEvent<
    WithdrawStrategyExecutedEvent.InputTuple,
    WithdrawStrategyExecutedEvent.OutputTuple,
    WithdrawStrategyExecutedEvent.OutputObject
  >;

  filters: {
    "AdaptersDeployPathSet(address[])": TypedContractEvent<
      AdaptersDeployPathSetEvent.InputTuple,
      AdaptersDeployPathSetEvent.OutputTuple,
      AdaptersDeployPathSetEvent.OutputObject
    >;
    AdaptersDeployPathSet: TypedContractEvent<
      AdaptersDeployPathSetEvent.InputTuple,
      AdaptersDeployPathSetEvent.OutputTuple,
      AdaptersDeployPathSetEvent.OutputObject
    >;

    "AdaptersWithdrawPathSet(address[])": TypedContractEvent<
      AdaptersWithdrawPathSetEvent.InputTuple,
      AdaptersWithdrawPathSetEvent.OutputTuple,
      AdaptersWithdrawPathSetEvent.OutputObject
    >;
    AdaptersWithdrawPathSet: TypedContractEvent<
      AdaptersWithdrawPathSetEvent.InputTuple,
      AdaptersWithdrawPathSetEvent.OutputTuple,
      AdaptersWithdrawPathSetEvent.OutputObject
    >;

    "DeployedAssetsValueUpdated(address,uint256,address)": TypedContractEvent<
      DeployedAssetsValueUpdatedEvent.InputTuple,
      DeployedAssetsValueUpdatedEvent.OutputTuple,
      DeployedAssetsValueUpdatedEvent.OutputObject
    >;
    DeployedAssetsValueUpdated: TypedContractEvent<
      DeployedAssetsValueUpdatedEvent.InputTuple,
      DeployedAssetsValueUpdatedEvent.OutputTuple,
      DeployedAssetsValueUpdatedEvent.OutputObject
    >;

    "DeploymentStrategyExecuted(address,uint256,address,uint256)": TypedContractEvent<
      DeploymentStrategyExecutedEvent.InputTuple,
      DeploymentStrategyExecutedEvent.OutputTuple,
      DeploymentStrategyExecutedEvent.OutputObject
    >;
    DeploymentStrategyExecuted: TypedContractEvent<
      DeploymentStrategyExecutedEvent.InputTuple,
      DeploymentStrategyExecutedEvent.OutputTuple,
      DeploymentStrategyExecutedEvent.OutputObject
    >;

    "LiquidTokenSet(address)": TypedContractEvent<
      LiquidTokenSetEvent.InputTuple,
      LiquidTokenSetEvent.OutputTuple,
      LiquidTokenSetEvent.OutputObject
    >;
    LiquidTokenSet: TypedContractEvent<
      LiquidTokenSetEvent.InputTuple,
      LiquidTokenSetEvent.OutputTuple,
      LiquidTokenSetEvent.OutputObject
    >;

    "PriceFeedSet(address,address)": TypedContractEvent<
      PriceFeedSetEvent.InputTuple,
      PriceFeedSetEvent.OutputTuple,
      PriceFeedSetEvent.OutputObject
    >;
    PriceFeedSet: TypedContractEvent<
      PriceFeedSetEvent.InputTuple,
      PriceFeedSetEvent.OutputTuple,
      PriceFeedSetEvent.OutputObject
    >;

    "StrategyNameSet(string)": TypedContractEvent<
      StrategyNameSetEvent.InputTuple,
      StrategyNameSetEvent.OutputTuple,
      StrategyNameSetEvent.OutputObject
    >;
    StrategyNameSet: TypedContractEvent<
      StrategyNameSetEvent.InputTuple,
      StrategyNameSetEvent.OutputTuple,
      StrategyNameSetEvent.OutputObject
    >;

    "TokenWrapperSet(address)": TypedContractEvent<
      TokenWrapperSetEvent.InputTuple,
      TokenWrapperSetEvent.OutputTuple,
      TokenWrapperSetEvent.OutputObject
    >;
    TokenWrapperSet: TypedContractEvent<
      TokenWrapperSetEvent.InputTuple,
      TokenWrapperSetEvent.OutputTuple,
      TokenWrapperSetEvent.OutputObject
    >;

    "VaultAddressSet(address)": TypedContractEvent<
      VaultAddressSetEvent.InputTuple,
      VaultAddressSetEvent.OutputTuple,
      VaultAddressSetEvent.OutputObject
    >;
    VaultAddressSet: TypedContractEvent<
      VaultAddressSetEvent.InputTuple,
      VaultAddressSetEvent.OutputTuple,
      VaultAddressSetEvent.OutputObject
    >;

    "WithdrawStrategyAddressSet(address)": TypedContractEvent<
      WithdrawStrategyAddressSetEvent.InputTuple,
      WithdrawStrategyAddressSetEvent.OutputTuple,
      WithdrawStrategyAddressSetEvent.OutputObject
    >;
    WithdrawStrategyAddressSet: TypedContractEvent<
      WithdrawStrategyAddressSetEvent.InputTuple,
      WithdrawStrategyAddressSetEvent.OutputTuple,
      WithdrawStrategyAddressSetEvent.OutputObject
    >;

    "WithdrawStrategyExecuted(address,address,uint256)": TypedContractEvent<
      WithdrawStrategyExecutedEvent.InputTuple,
      WithdrawStrategyExecutedEvent.OutputTuple,
      WithdrawStrategyExecutedEvent.OutputObject
    >;
    WithdrawStrategyExecuted: TypedContractEvent<
      WithdrawStrategyExecutedEvent.InputTuple,
      WithdrawStrategyExecutedEvent.OutputTuple,
      WithdrawStrategyExecutedEvent.OutputObject
    >;
  };
}
