/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ISwapperInterface extends Interface {
  getFunction(nameOrSignature: "setDefaultSlippage" | "swap"): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "DefaultSlippageUpdated" | "SwapExecuted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "setDefaultSlippage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "setDefaultSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
}

export namespace DefaultSlippageUpdatedEvent {
  export type InputTuple = [
    oldSlippage: BigNumberish,
    newSlippage: BigNumberish
  ];
  export type OutputTuple = [oldSlippage: bigint, newSlippage: bigint];
  export interface OutputObject {
    oldSlippage: bigint;
    newSlippage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapExecutedEvent {
  export type InputTuple = [
    owner: AddressLike,
    receiver: AddressLike,
    tokenIn: AddressLike,
    tokenOut: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    receiver: string,
    tokenIn: string,
    tokenOut: string,
    amountIn: bigint,
    amountOut: bigint
  ];
  export interface OutputObject {
    owner: string;
    receiver: string;
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ISwapper extends BaseContract {
  connect(runner?: ContractRunner | null): ISwapper;
  waitForDeployment(): Promise<this>;

  interface: ISwapperInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  setDefaultSlippage: TypedContractMethod<
    [slippage: BigNumberish],
    [void],
    "nonpayable"
  >;

  swap: TypedContractMethod<
    [
      receiver: AddressLike,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      slippage: BigNumberish
    ],
    [[bigint, bigint] & { swpAmount: bigint; spentAmount: bigint }],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "setDefaultSlippage"
  ): TypedContractMethod<[slippage: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swap"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      slippage: BigNumberish
    ],
    [[bigint, bigint] & { swpAmount: bigint; spentAmount: bigint }],
    "nonpayable"
  >;

  getEvent(
    key: "DefaultSlippageUpdated"
  ): TypedContractEvent<
    DefaultSlippageUpdatedEvent.InputTuple,
    DefaultSlippageUpdatedEvent.OutputTuple,
    DefaultSlippageUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SwapExecuted"
  ): TypedContractEvent<
    SwapExecutedEvent.InputTuple,
    SwapExecutedEvent.OutputTuple,
    SwapExecutedEvent.OutputObject
  >;

  filters: {
    "DefaultSlippageUpdated(uint256,uint256)": TypedContractEvent<
      DefaultSlippageUpdatedEvent.InputTuple,
      DefaultSlippageUpdatedEvent.OutputTuple,
      DefaultSlippageUpdatedEvent.OutputObject
    >;
    DefaultSlippageUpdated: TypedContractEvent<
      DefaultSlippageUpdatedEvent.InputTuple,
      DefaultSlippageUpdatedEvent.OutputTuple,
      DefaultSlippageUpdatedEvent.OutputObject
    >;

    "SwapExecuted(address,address,address,address,uint256,uint256)": TypedContractEvent<
      SwapExecutedEvent.InputTuple,
      SwapExecutedEvent.OutputTuple,
      SwapExecutedEvent.OutputObject
    >;
    SwapExecuted: TypedContractEvent<
      SwapExecutedEvent.InputTuple,
      SwapExecutedEvent.OutputTuple,
      SwapExecutedEvent.OutputObject
    >;
  };
}
