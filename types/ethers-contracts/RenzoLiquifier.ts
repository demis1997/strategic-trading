/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface RenzoLiquifierInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_deprecated_maxDepositTVL"
      | "addCollateralToken"
      | "addOperatorDelegator"
      | "calculateTVLs"
      | "chooseOperatorDelegatorForDeposit"
      | "chooseOperatorDelegatorForWithdraw"
      | "collateralTokenTvlLimits"
      | "collateralTokens"
      | "delegationManager"
      | "deposit(address,uint256,uint256)"
      | "deposit(address,uint256)"
      | "depositETH(uint256)"
      | "depositETH()"
      | "depositQueue"
      | "depositTokenRewardsFromProtocol"
      | "ezETH"
      | "getCollateralTokenIndex"
      | "getCollateralTokensLength"
      | "getOperatorDelegatorsLength"
      | "initialize"
      | "operatorDelegatorAllocations"
      | "operatorDelegators"
      | "paused"
      | "pendingWithdrawals"
      | "removeCollateralToken"
      | "removeOperatorDelegator"
      | "renzoOracle"
      | "roleManager"
      | "setOperatorDelegatorAllocation"
      | "setPaused"
      | "setTokenTvlLimit"
      | "stakeEthInOperatorDelegator"
      | "strategyManager"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CollateralTokenAdded"
      | "CollateralTokenRemoved"
      | "CollateralTokenTvlUpdated"
      | "Deposit"
      | "Initialized"
      | "OperatorDelegatorAdded"
      | "OperatorDelegatorAllocationUpdated"
      | "OperatorDelegatorRemoved"
      | "UserWithdrawCompleted"
      | "UserWithdrawStarted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_deprecated_maxDepositTVL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addCollateralToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addOperatorDelegator",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTVLs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chooseOperatorDelegatorForDeposit",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chooseOperatorDelegatorForWithdraw",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish[][],
      BigNumberish[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralTokenTvlLimits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegationManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(address,uint256,uint256)",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositQueue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositTokenRewardsFromProtocol",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ezETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCollateralTokenIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralTokensLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorDelegatorsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorDelegatorAllocations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorDelegators",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingWithdrawals",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollateralToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOperatorDelegator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renzoOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roleManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOperatorDelegatorAllocation",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setPaused", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setTokenTvlLimit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeEthInOperatorDelegator",
    values: [AddressLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "strategyManager",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_deprecated_maxDepositTVL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCollateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addOperatorDelegator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTVLs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chooseOperatorDelegatorForDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chooseOperatorDelegatorForWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralTokenTvlLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegationManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositETH(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositETH()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositTokenRewardsFromProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ezETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralTokenIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralTokensLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorDelegatorsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "operatorDelegatorAllocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorDelegators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOperatorDelegator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renzoOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roleManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperatorDelegatorAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenTvlLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeEthInOperatorDelegator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategyManager",
    data: BytesLike
  ): Result;
}

export namespace CollateralTokenAddedEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralTokenRemovedEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralTokenTvlUpdatedEvent {
  export type InputTuple = [token: AddressLike, tvl: BigNumberish];
  export type OutputTuple = [token: string, tvl: bigint];
  export interface OutputObject {
    token: string;
    tvl: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    depositor: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    ezETHMinted: BigNumberish,
    referralId: BigNumberish
  ];
  export type OutputTuple = [
    depositor: string,
    token: string,
    amount: bigint,
    ezETHMinted: bigint,
    referralId: bigint
  ];
  export interface OutputObject {
    depositor: string;
    token: string;
    amount: bigint;
    ezETHMinted: bigint;
    referralId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorDelegatorAddedEvent {
  export type InputTuple = [od: AddressLike];
  export type OutputTuple = [od: string];
  export interface OutputObject {
    od: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorDelegatorAllocationUpdatedEvent {
  export type InputTuple = [od: AddressLike, allocation: BigNumberish];
  export type OutputTuple = [od: string, allocation: bigint];
  export interface OutputObject {
    od: string;
    allocation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorDelegatorRemovedEvent {
  export type InputTuple = [od: AddressLike];
  export type OutputTuple = [od: string];
  export interface OutputObject {
    od: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserWithdrawCompletedEvent {
  export type InputTuple = [
    withdrawalRoot: BytesLike,
    withdrawer: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    ezETHBurned: BigNumberish
  ];
  export type OutputTuple = [
    withdrawalRoot: string,
    withdrawer: string,
    token: string,
    amount: bigint,
    ezETHBurned: bigint
  ];
  export interface OutputObject {
    withdrawalRoot: string;
    withdrawer: string;
    token: string;
    amount: bigint;
    ezETHBurned: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserWithdrawStartedEvent {
  export type InputTuple = [
    withdrawalRoot: BytesLike,
    withdrawer: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    ezETHToBurn: BigNumberish
  ];
  export type OutputTuple = [
    withdrawalRoot: string,
    withdrawer: string,
    token: string,
    amount: bigint,
    ezETHToBurn: bigint
  ];
  export interface OutputObject {
    withdrawalRoot: string;
    withdrawer: string;
    token: string;
    amount: bigint;
    ezETHToBurn: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RenzoLiquifier extends BaseContract {
  connect(runner?: ContractRunner | null): RenzoLiquifier;
  waitForDeployment(): Promise<this>;

  interface: RenzoLiquifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _deprecated_maxDepositTVL: TypedContractMethod<[], [bigint], "view">;

  addCollateralToken: TypedContractMethod<
    [_newCollateralToken: AddressLike],
    [void],
    "nonpayable"
  >;

  addOperatorDelegator: TypedContractMethod<
    [_newOperatorDelegator: AddressLike, _allocationBasisPoints: BigNumberish],
    [void],
    "nonpayable"
  >;

  calculateTVLs: TypedContractMethod<
    [],
    [[bigint[][], bigint[], bigint]],
    "view"
  >;

  chooseOperatorDelegatorForDeposit: TypedContractMethod<
    [tvls: BigNumberish[], totalTVL: BigNumberish],
    [string],
    "view"
  >;

  chooseOperatorDelegatorForWithdraw: TypedContractMethod<
    [
      tokenIndex: BigNumberish,
      ezETHValue: BigNumberish,
      operatorDelegatorTokenTVLs: BigNumberish[][],
      operatorDelegatorTVLs: BigNumberish[],
      totalTVL: BigNumberish
    ],
    [string],
    "view"
  >;

  collateralTokenTvlLimits: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  collateralTokens: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  delegationManager: TypedContractMethod<[], [string], "view">;

  "deposit(address,uint256,uint256)": TypedContractMethod<
    [
      _collateralToken: AddressLike,
      _amount: BigNumberish,
      _referralId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  "deposit(address,uint256)": TypedContractMethod<
    [_collateralToken: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  "depositETH(uint256)": TypedContractMethod<
    [_referralId: BigNumberish],
    [void],
    "payable"
  >;

  "depositETH()": TypedContractMethod<[], [void], "payable">;

  depositQueue: TypedContractMethod<[], [string], "view">;

  depositTokenRewardsFromProtocol: TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  ezETH: TypedContractMethod<[], [string], "view">;

  getCollateralTokenIndex: TypedContractMethod<
    [_collateralToken: AddressLike],
    [bigint],
    "view"
  >;

  getCollateralTokensLength: TypedContractMethod<[], [bigint], "view">;

  getOperatorDelegatorsLength: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [
      _roleManager: AddressLike,
      _ezETH: AddressLike,
      _renzoOracle: AddressLike,
      _strategyManager: AddressLike,
      _delegationManager: AddressLike,
      _depositQueue: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  operatorDelegatorAllocations: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  operatorDelegators: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  paused: TypedContractMethod<[], [boolean], "view">;

  pendingWithdrawals: TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, string, string, bigint, string, boolean] & {
        ezETHToBurn: bigint;
        withdrawer: string;
        tokenToWithdraw: string;
        tokenAmountToWithdraw: bigint;
        operatorDelegator: string;
        completed: boolean;
      }
    ],
    "view"
  >;

  removeCollateralToken: TypedContractMethod<
    [_collateralTokenToRemove: AddressLike],
    [void],
    "nonpayable"
  >;

  removeOperatorDelegator: TypedContractMethod<
    [_operatorDelegatorToRemove: AddressLike],
    [void],
    "nonpayable"
  >;

  renzoOracle: TypedContractMethod<[], [string], "view">;

  roleManager: TypedContractMethod<[], [string], "view">;

  setOperatorDelegatorAllocation: TypedContractMethod<
    [_operatorDelegator: AddressLike, _allocationBasisPoints: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPaused: TypedContractMethod<[_paused: boolean], [void], "nonpayable">;

  setTokenTvlLimit: TypedContractMethod<
    [_token: AddressLike, _limit: BigNumberish],
    [void],
    "nonpayable"
  >;

  stakeEthInOperatorDelegator: TypedContractMethod<
    [
      operatorDelegator: AddressLike,
      pubkey: BytesLike,
      signature: BytesLike,
      depositDataRoot: BytesLike
    ],
    [void],
    "payable"
  >;

  strategyManager: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_deprecated_maxDepositTVL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addCollateralToken"
  ): TypedContractMethod<
    [_newCollateralToken: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addOperatorDelegator"
  ): TypedContractMethod<
    [_newOperatorDelegator: AddressLike, _allocationBasisPoints: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateTVLs"
  ): TypedContractMethod<[], [[bigint[][], bigint[], bigint]], "view">;
  getFunction(
    nameOrSignature: "chooseOperatorDelegatorForDeposit"
  ): TypedContractMethod<
    [tvls: BigNumberish[], totalTVL: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "chooseOperatorDelegatorForWithdraw"
  ): TypedContractMethod<
    [
      tokenIndex: BigNumberish,
      ezETHValue: BigNumberish,
      operatorDelegatorTokenTVLs: BigNumberish[][],
      operatorDelegatorTVLs: BigNumberish[],
      totalTVL: BigNumberish
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "collateralTokenTvlLimits"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "collateralTokens"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "delegationManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deposit(address,uint256,uint256)"
  ): TypedContractMethod<
    [
      _collateralToken: AddressLike,
      _amount: BigNumberish,
      _referralId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit(address,uint256)"
  ): TypedContractMethod<
    [_collateralToken: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositETH(uint256)"
  ): TypedContractMethod<[_referralId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "depositETH()"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "depositQueue"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "depositTokenRewardsFromProtocol"
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ezETH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCollateralTokenIndex"
  ): TypedContractMethod<[_collateralToken: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCollateralTokensLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOperatorDelegatorsLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _roleManager: AddressLike,
      _ezETH: AddressLike,
      _renzoOracle: AddressLike,
      _strategyManager: AddressLike,
      _delegationManager: AddressLike,
      _depositQueue: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "operatorDelegatorAllocations"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "operatorDelegators"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pendingWithdrawals"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, string, string, bigint, string, boolean] & {
        ezETHToBurn: bigint;
        withdrawer: string;
        tokenToWithdraw: string;
        tokenAmountToWithdraw: bigint;
        operatorDelegator: string;
        completed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeCollateralToken"
  ): TypedContractMethod<
    [_collateralTokenToRemove: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeOperatorDelegator"
  ): TypedContractMethod<
    [_operatorDelegatorToRemove: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renzoOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "roleManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setOperatorDelegatorAllocation"
  ): TypedContractMethod<
    [_operatorDelegator: AddressLike, _allocationBasisPoints: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPaused"
  ): TypedContractMethod<[_paused: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTokenTvlLimit"
  ): TypedContractMethod<
    [_token: AddressLike, _limit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stakeEthInOperatorDelegator"
  ): TypedContractMethod<
    [
      operatorDelegator: AddressLike,
      pubkey: BytesLike,
      signature: BytesLike,
      depositDataRoot: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "strategyManager"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "CollateralTokenAdded"
  ): TypedContractEvent<
    CollateralTokenAddedEvent.InputTuple,
    CollateralTokenAddedEvent.OutputTuple,
    CollateralTokenAddedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralTokenRemoved"
  ): TypedContractEvent<
    CollateralTokenRemovedEvent.InputTuple,
    CollateralTokenRemovedEvent.OutputTuple,
    CollateralTokenRemovedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralTokenTvlUpdated"
  ): TypedContractEvent<
    CollateralTokenTvlUpdatedEvent.InputTuple,
    CollateralTokenTvlUpdatedEvent.OutputTuple,
    CollateralTokenTvlUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OperatorDelegatorAdded"
  ): TypedContractEvent<
    OperatorDelegatorAddedEvent.InputTuple,
    OperatorDelegatorAddedEvent.OutputTuple,
    OperatorDelegatorAddedEvent.OutputObject
  >;
  getEvent(
    key: "OperatorDelegatorAllocationUpdated"
  ): TypedContractEvent<
    OperatorDelegatorAllocationUpdatedEvent.InputTuple,
    OperatorDelegatorAllocationUpdatedEvent.OutputTuple,
    OperatorDelegatorAllocationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OperatorDelegatorRemoved"
  ): TypedContractEvent<
    OperatorDelegatorRemovedEvent.InputTuple,
    OperatorDelegatorRemovedEvent.OutputTuple,
    OperatorDelegatorRemovedEvent.OutputObject
  >;
  getEvent(
    key: "UserWithdrawCompleted"
  ): TypedContractEvent<
    UserWithdrawCompletedEvent.InputTuple,
    UserWithdrawCompletedEvent.OutputTuple,
    UserWithdrawCompletedEvent.OutputObject
  >;
  getEvent(
    key: "UserWithdrawStarted"
  ): TypedContractEvent<
    UserWithdrawStartedEvent.InputTuple,
    UserWithdrawStartedEvent.OutputTuple,
    UserWithdrawStartedEvent.OutputObject
  >;

  filters: {
    "CollateralTokenAdded(address)": TypedContractEvent<
      CollateralTokenAddedEvent.InputTuple,
      CollateralTokenAddedEvent.OutputTuple,
      CollateralTokenAddedEvent.OutputObject
    >;
    CollateralTokenAdded: TypedContractEvent<
      CollateralTokenAddedEvent.InputTuple,
      CollateralTokenAddedEvent.OutputTuple,
      CollateralTokenAddedEvent.OutputObject
    >;

    "CollateralTokenRemoved(address)": TypedContractEvent<
      CollateralTokenRemovedEvent.InputTuple,
      CollateralTokenRemovedEvent.OutputTuple,
      CollateralTokenRemovedEvent.OutputObject
    >;
    CollateralTokenRemoved: TypedContractEvent<
      CollateralTokenRemovedEvent.InputTuple,
      CollateralTokenRemovedEvent.OutputTuple,
      CollateralTokenRemovedEvent.OutputObject
    >;

    "CollateralTokenTvlUpdated(address,uint256)": TypedContractEvent<
      CollateralTokenTvlUpdatedEvent.InputTuple,
      CollateralTokenTvlUpdatedEvent.OutputTuple,
      CollateralTokenTvlUpdatedEvent.OutputObject
    >;
    CollateralTokenTvlUpdated: TypedContractEvent<
      CollateralTokenTvlUpdatedEvent.InputTuple,
      CollateralTokenTvlUpdatedEvent.OutputTuple,
      CollateralTokenTvlUpdatedEvent.OutputObject
    >;

    "Deposit(address,address,uint256,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OperatorDelegatorAdded(address)": TypedContractEvent<
      OperatorDelegatorAddedEvent.InputTuple,
      OperatorDelegatorAddedEvent.OutputTuple,
      OperatorDelegatorAddedEvent.OutputObject
    >;
    OperatorDelegatorAdded: TypedContractEvent<
      OperatorDelegatorAddedEvent.InputTuple,
      OperatorDelegatorAddedEvent.OutputTuple,
      OperatorDelegatorAddedEvent.OutputObject
    >;

    "OperatorDelegatorAllocationUpdated(address,uint256)": TypedContractEvent<
      OperatorDelegatorAllocationUpdatedEvent.InputTuple,
      OperatorDelegatorAllocationUpdatedEvent.OutputTuple,
      OperatorDelegatorAllocationUpdatedEvent.OutputObject
    >;
    OperatorDelegatorAllocationUpdated: TypedContractEvent<
      OperatorDelegatorAllocationUpdatedEvent.InputTuple,
      OperatorDelegatorAllocationUpdatedEvent.OutputTuple,
      OperatorDelegatorAllocationUpdatedEvent.OutputObject
    >;

    "OperatorDelegatorRemoved(address)": TypedContractEvent<
      OperatorDelegatorRemovedEvent.InputTuple,
      OperatorDelegatorRemovedEvent.OutputTuple,
      OperatorDelegatorRemovedEvent.OutputObject
    >;
    OperatorDelegatorRemoved: TypedContractEvent<
      OperatorDelegatorRemovedEvent.InputTuple,
      OperatorDelegatorRemovedEvent.OutputTuple,
      OperatorDelegatorRemovedEvent.OutputObject
    >;

    "UserWithdrawCompleted(bytes32,address,address,uint256,uint256)": TypedContractEvent<
      UserWithdrawCompletedEvent.InputTuple,
      UserWithdrawCompletedEvent.OutputTuple,
      UserWithdrawCompletedEvent.OutputObject
    >;
    UserWithdrawCompleted: TypedContractEvent<
      UserWithdrawCompletedEvent.InputTuple,
      UserWithdrawCompletedEvent.OutputTuple,
      UserWithdrawCompletedEvent.OutputObject
    >;

    "UserWithdrawStarted(bytes32,address,address,uint256,uint256)": TypedContractEvent<
      UserWithdrawStartedEvent.InputTuple,
      UserWithdrawStartedEvent.OutputTuple,
      UserWithdrawStartedEvent.OutputObject
    >;
    UserWithdrawStarted: TypedContractEvent<
      UserWithdrawStartedEvent.InputTuple,
      UserWithdrawStartedEvent.OutputTuple,
      UserWithdrawStartedEvent.OutputObject
    >;
  };
}
